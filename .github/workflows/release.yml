name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.2)'
        required: true
        type: string
      changelog:
        description: 'Release notes (optional - will auto-generate from git commits if not provided)'
        required: false
        type: string

jobs:
  release:
    name: Manual Release Process
    runs-on: ubuntu-latest

    permissions:
      contents: write # Required for commits and tags
      id-token: write # Required for pub.dev publishing

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.2'
          cache: true

      - name: Validate version format
        id: validate_version
        run: |
          VERSION="${{ github.event.inputs.version }}"

          # Check if version matches semantic versioning pattern
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+([+-][a-zA-Z0-9.-]+)?$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Please use semantic versioning format like: 1.0.2, 2.1.0-beta.1, etc."
            exit 1
          fi

          echo "‚úÖ Version format is valid: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG=v$VERSION" >> $GITHUB_OUTPUT

      - name: Check if version/tag already exists
        id: check_existing
        run: |
          VERSION="${{ steps.validate_version.outputs.VERSION }}"
          TAG="${{ steps.validate_version.outputs.TAG }}"

          # Check if tag already exists
          if git tag -l | grep -q "^$TAG$"; then
            echo "‚ùå Tag $TAG already exists!"
            echo "Please choose a different version or delete the existing tag first."
            exit 1
          fi

          # Check current version in pubspec.yaml
          CURRENT_VERSION=$(grep '^version: ' pubspec.yaml | sed 's/version: //')
          echo "Current version in pubspec.yaml: $CURRENT_VERSION"
          echo "Requested version: $VERSION"

          if [ "$CURRENT_VERSION" = "$VERSION" ]; then
            echo "‚ö†Ô∏è Version $VERSION is already in pubspec.yaml"
            echo "NEEDS_UPDATE=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Will update version from $CURRENT_VERSION to $VERSION"
            echo "NEEDS_UPDATE=true" >> $GITHUB_OUTPUT
          fi

      - name: Update version in pubspec.yaml
        if: steps.check_existing.outputs.NEEDS_UPDATE == 'true'
        run: |
          VERSION="${{ steps.validate_version.outputs.VERSION }}"

          # Update version in pubspec.yaml
          sed -i "s/^version: .*/version: $VERSION/" pubspec.yaml

          echo "‚úÖ Updated pubspec.yaml version to $VERSION"

          # Verify the change
          NEW_VERSION=$(grep '^version: ' pubspec.yaml | sed 's/version: //')
          echo "Verified version in pubspec.yaml: $NEW_VERSION"

      - name: Update CHANGELOG.md
        run: |
          VERSION="${{ steps.validate_version.outputs.VERSION }}"
          CUSTOM_NOTES="${{ github.event.inputs.changelog }}"

          # Create a backup
          cp CHANGELOG.md CHANGELOG.md.bak

          # Check if version already exists in changelog
          if grep -q "^## $VERSION" CHANGELOG.md; then
            echo "‚ÑπÔ∏è Version $VERSION already exists in CHANGELOG.md, skipping update"
          else
            echo "‚úÖ Adding version $VERSION to CHANGELOG.md"
            
            # Create new changelog entry
            if [ -n "$CUSTOM_NOTES" ]; then
              # Use custom notes provided by user
              printf "## $VERSION\n\n$CUSTOM_NOTES\n\n" > temp_changelog.md
            else
              # Generate changelog from git commits since last tag
              echo "üìù Generating changelog from git commits..."
              
              # Get the last tag to compare against
              LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
              
              if [ -n "$LAST_TAG" ]; then
                echo "üìã Getting commits since last tag: $LAST_TAG"
                # Get commits since last tag, excluding merge commits
                COMMITS=$(git log --oneline --no-merges "$LAST_TAG"..HEAD --pretty=format:"* %s" 2>/dev/null || echo "")
              else
                echo "üìã No previous tags found, getting recent commits"
                # If no previous tags, get last 10 commits
                COMMITS=$(git log --oneline --no-merges -10 --pretty=format:"* %s" 2>/dev/null || echo "")
              fi
              
              # Create changelog entry
              if [ -n "$COMMITS" ]; then
                printf "## $VERSION\n\n### Changes\n\n$COMMITS\n\n" > temp_changelog.md
                echo "‚úÖ Generated changelog from $(echo "$COMMITS" | wc -l) commits"
              else
                # Fallback if no commits found
                printf "## $VERSION\n\n* Manual release\n* Version bump to $VERSION\n\n" > temp_changelog.md
                echo "‚ö†Ô∏è No commits found, using fallback changelog"
              fi
            fi
            
            # Prepend new entry to existing changelog (after the first line)
            head -n 1 CHANGELOG.md > new_changelog.md
            echo "" >> new_changelog.md
            cat temp_changelog.md >> new_changelog.md
            tail -n +2 CHANGELOG.md >> new_changelog.md
            mv new_changelog.md CHANGELOG.md
            rm temp_changelog.md
          fi

      - name: Install dependencies and validate
        run: |
          echo "üì¶ Installing dependencies..."
          dart pub get

          echo "üîç Running analysis..."
          dart analyze lib/ test/ || echo "‚ö†Ô∏è Analysis completed with issues, continuing..."

          echo "üß™ Running tests..."
          dart test --coverage || echo "‚ö†Ô∏è Tests failed or no tests found, continuing..."

      - name: Commit version changes
        id: commit_changes
        run: |
          VERSION="${{ steps.validate_version.outputs.VERSION }}"

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check if there are changes to commit
          if git diff --quiet && git diff --cached --quiet; then
            echo "No changes to commit"
            echo "COMMITTED=false" >> $GITHUB_OUTPUT
          else
            # Add and commit changes
            git add pubspec.yaml CHANGELOG.md
            git commit -m "chore: bump version to $VERSION

            - Updated version in pubspec.yaml
            - Updated CHANGELOG.md with release notes
            
            Release initiated by: ${{ github.actor }}
            Workflow: ${{ github.workflow }}"
            
            # Push changes
            git push origin master
            
            echo "‚úÖ Committed and pushed version changes"
            echo "COMMITTED=true" >> $GITHUB_OUTPUT
          fi

      - name: Validate package for publication
        run: |
          echo "üìã Validating package for publication..."
          dart pub publish --dry-run

      - name: Extract changelog for release
        id: changelog
        run: |
          VERSION="${{ steps.validate_version.outputs.VERSION }}"
          CUSTOM_NOTES="${{ github.event.inputs.changelog }}"

          if [ -n "$CUSTOM_NOTES" ]; then
            # Use custom notes
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
            echo "$CUSTOM_NOTES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            # Try to extract from CHANGELOG.md first
            awk "/^## $VERSION/{flag=1; next} /^## [0-9]/{flag=0} flag" CHANGELOG.md > release_notes.md
            
            # If found in CHANGELOG.md, use that
            if [ -s release_notes.md ]; then
              echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
              cat release_notes.md >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              # Generate from git commits (same logic as CHANGELOG.md update)
              echo "üìù Generating release notes from git commits..."
              
              # Get the last tag to compare against
              LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
              
              if [ -n "$LAST_TAG" ]; then
                echo "üìã Getting commits since last tag: $LAST_TAG"
                # Get commits since last tag, excluding merge commits
                COMMITS=$(git log --oneline --no-merges "$LAST_TAG"..HEAD --pretty=format:"* %s" 2>/dev/null || echo "")
              else
                echo "üìã No previous tags found, getting recent commits"
                # If no previous tags, get last 10 commits
                COMMITS=$(git log --oneline --no-merges -10 --pretty=format:"* %s" 2>/dev/null || echo "")
              fi
              
              # Create release notes
              if [ -n "$COMMITS" ]; then
                echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
                echo "### Changes" >> $GITHUB_OUTPUT
                echo "" >> $GITHUB_OUTPUT
                echo "$COMMITS" >> $GITHUB_OUTPUT
                echo "EOF" >> $GITHUB_OUTPUT
                echo "‚úÖ Generated release notes from $(echo "$COMMITS" | wc -l) commits"
              else
                # Fallback if no commits found
                echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
                echo "* Manual release of version $VERSION" >> $GITHUB_OUTPUT
                echo "EOF" >> $GITHUB_OUTPUT
                echo "‚ö†Ô∏è No commits found, using fallback release notes"
              fi
            fi
          fi

      - name: Create and push tag
        run: |
          TAG="${{ steps.validate_version.outputs.TAG }}"
          VERSION="${{ steps.validate_version.outputs.VERSION }}"

          # Create annotated tag with changelog
          git tag -a "$TAG" -m "Release $VERSION

          Released by: ${{ github.actor }}

          ${{ steps.changelog.outputs.RELEASE_NOTES }}"

          # Push the tag
          git push origin "$TAG"

          echo "‚úÖ Created and pushed tag: $TAG"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.validate_version.outputs.TAG }}
          release_name: Release ${{ steps.validate_version.outputs.VERSION }}
          body: |
            ## Changes in ${{ steps.validate_version.outputs.VERSION }}

            ${{ steps.changelog.outputs.RELEASE_NOTES }}

            ## Installation

            Add this to your package's `pubspec.yaml` file:

            ```yaml
            dependencies:
              ensemble_walletconnect: ^${{ steps.validate_version.outputs.VERSION }}
            ```

            Then run:
            ```bash
            flutter pub get
            ```

            ## Documentation

            - [pub.dev package](https://pub.dev/packages/ensemble_walletconnect)
            - [API documentation](https://pub.dev/documentation/ensemble_walletconnect)
            - [Repository](https://github.com/EnsembleUI/ensemble_walletconnect)

            ---
            Released by: @${{ github.actor }}
          draft: false
          prerelease: false
